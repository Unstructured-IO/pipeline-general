name: Build And Push Docker Image

on:
  pull_request:
    branches:
      - main 

env:
  DOCKER_REPOSITORY: quay.io/unstructured-io/unstructured-api-multiarch
  DOCKER_BUILD_REPOSITORY: quay.io/unstructured-io/build-unstructured-api
  PACKAGE: "unstructured-api"
  PIPELINE_PACKAGE: "general"
  PIP_VERSION: "22.2.1"
  PYTHON_VERSION: "3.8"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
        key: ci-venv-${{ env.PIPELINE_FAMILY }}-${{ hashFiles('requirements/test.txt') }}
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache.outputs.cache-hit != 'true'
      run: |
        python${{ env.PYTHON_VERSION }} -m venv .venv
        source .venv/bin/activate
        make install-ci
  build-amd:
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
    - uses: docker/setup-buildx-action@v1
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set SHORT_SHA
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV 
    - name: Set virtualenv cache
      uses: actions/cache@v3
      id: virtualenv-cache
      with:
        path: |
          .venv
        key: ci-venv-${{ env.PIPELINE_FAMILY }}-${{ hashFiles('requirements/test.txt') }}
    - name: Login to Quay.io
      uses: docker/login-action@v1
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_IO_ROBOT_USERNAME }}
        password: ${{ secrets.QUAY_IO_ROBOT_TOKEN }}
    - name: Build AMD image
      run: |
        DOCKER_BUILDKIT=1 docker buildx build --platform=linux/amd64 --load \
          --progress plain \
          -t $DOCKER_BUILD_REPOSITORY:small-test .
        docker images
        docker push $DOCKER_BUILD_REPOSITORY:small-test
    # - name: Test AMD image
    #   run: |
    #     IMAGE_NAME="$DOCKER_BUILD_REPOSITORY:amd-$SHORT_SHA" make docker-test 
    # - name: Push AMD image
    #   run: |
    #     # write to the build repository to cache for the publish-images job
    #     docker push $DOCKER_BUILD_REPOSITORY:amd-$SHORT_SHA
  # build-arm:
  #   runs-on: ubuntu-latest
  #   needs: [setup]
  #   steps:
  #   - uses: docker/setup-buildx-action@v1
  #   - name: Checkout code
  #     uses: actions/checkout@v3
  #   - name: Set SHORT_SHA
  #     run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV 
  #   - name: Set virtualenv cache
  #     uses: actions/cache@v3
  #     id: virtualenv-cache
  #     with:
  #       path: |
  #         .venv
  #       key: ci-venv-${{ env.PIPELINE_FAMILY }}-${{ hashFiles('requirements/test.txt') }}
  #   - name: Login to Quay.io
  #     uses: docker/login-action@v1
  #     with:
  #       registry: quay.io
  #       username: ${{ secrets.QUAY_IO_ROBOT_USERNAME }}
  #       password: ${{ secrets.QUAY_IO_ROBOT_TOKEN }}
  #   - name: Set up QEMU
  #     uses: docker/setup-qemu-action@v2
  #   - name: Build ARM image
  #     run: |
  #       DOCKER_BUILDKIT=1 docker buildx build --platform=linux/arm64 --load \
  #         --build-arg PIP_VERSION=$PIP_VERSION \
  #         --build-arg BUILDKIT_INLINE_CACHE=1 \
  #         --build-arg PIPELINE_PACKAGE=${{ env.PIPELINE_PACKAGE }} \
  #         --progress plain \
  #         -t $DOCKER_BUILD_REPOSITORY:arm-$SHORT_SHA .
  #       docker push $DOCKER_BUILD_REPOSITORY:amd-$SHORT_SHA
  #   - name: Test ARM image
  #     run: |
  #       IMAGE_NAME="${{ env.DOCKER_BUILD_REPOSITORY }}:arm-$SHORT_SHA" make docker-test 
  #       # only run a subset of tests on ARM, since they take a long time with emulation
  #       # IMAGE_NAME="${{ env.DOCKER_BUILD_REPOSITORY }}:arm-$SHORT_SHA" make docker-test    
  #   - name: Push ARM image
  #     run: |
  #       # write to the build repository to cache for the publish-images job
  #       docker push $DOCKER_BUILD_REPOSITORY:arm-$SHORT_SHA
  # publish-images:
  #   runs-on: ubuntu-latest
  #   needs: [setup, build-amd, build-arm]
  #   steps:
  #   - uses: docker/setup-buildx-action@v1
  #   - name: Checkout code
  #     uses: actions/checkout@v3
  #   - name: Set SHORT_SHA
  #     run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV 
  #   - name: Login to Quay.io
  #     uses: docker/login-action@v1
  #     with:
  #       registry: quay.io
  #       username: ${{ secrets.QUAY_IO_ROBOT_USERNAME }}
  #       password: ${{ secrets.QUAY_IO_ROBOT_TOKEN }}
  #   - name: Pull AMD image
  #     run: |
  #       docker pull $DOCKER_BUILD_REPOSITORY:amd-$SHORT_SHA
  #   - name: Pull ARM image
  #     run: |
  #       docker pull $DOCKER_BUILD_REPOSITORY:arm-$SHORT_SHA
  #   - name: Push AMD and ARM tags
  #     run: |
  #       # these are used to construct the final manifest but also cache-from in subsequent runs
  #       docker tag $DOCKER_BUILD_REPOSITORY:amd-$SHORT_SHA $DOCKER_BUILD_REPOSITORY:amd
  #       docker push $DOCKER_BUILD_REPOSITORY:amd
  #       docker tag $DOCKER_BUILD_REPOSITORY:arm-$SHORT_SHA $DOCKER_BUILD_REPOSITORY:arm
  #       docker push $DOCKER_BUILD_REPOSITORY:arm
  #   - name: Push multiarch manifest
  #     run: |
  #       docker manifest create ${DOCKER_REPOSITORY}:latest $DOCKER_BUILD_REPOSITORY:amd $DOCKER_BUILD_REPOSITORY:arm
  #       docker manifest push $DOCKER_REPOSITORY:latest
  #       docker manifest create ${DOCKER_REPOSITORY}:$SHORT_SHA $DOCKER_BUILD_REPOSITORY:amd $DOCKER_BUILD_REPOSITORY:arm
  #       docker manifest push $DOCKER_REPOSITORY:$SHORT_SHA
  #       VERSION=$(grep -m1 version preprocessing-pipeline-family.yaml | cut -d ' ' -f2)
  #       docker manifest create ${DOCKER_REPOSITORY}:$VERSION $DOCKER_BUILD_REPOSITORY:amd $DOCKER_BUILD_REPOSITORY:arm
  #       docker manifest push ${DOCKER_REPOSITORY}:$VERSION
